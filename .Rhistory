kable(anova)
antable = data.frame(Source = c("Regression", "Error", "Total"),
df = c(1, nrow(NE) - 2, nrow(NE) - 1),
ss = c(SSR_NE, SSE_NE, SSR_NE + SSE_NE),
ms = c(MSR_NE, MSE_NE, NA),
f_val = c(F_NE, NA, NA),
p_val = c(0, NA, NA)
)
library(knitr)
antable
kable(antable)
antable = data.frame(Source = c("Regression", "Error", "Total"),
df = c(1, nrow(NE) - 2, nrow(NE) - 1),
ss = c(SSR_NE, SSE_NE, SSR_NE + SSE_NE),
ms = c(MSR_NE, MSE_NE, NA),
f_val = c(F_NE, NA, NA),
p_val = c(0, NA, NA)
)
anova_table <- function(region, ssr, sse, msr, mse, f, p) {
antable = data.frame(Source = c("Regression", "Error", "Total"),
df = c(1, nrow(region) - 2, nrow(region) - 1),
ss = c(ssr, sse, ssr + sse),
ms = c(msr, mse, NA),
f_val = c(f, NA, NA),
p_val = c(p, NA, NA))
return(antable)
}
kable(anova_table(NE, SSR_NE, SSE_NE, MSR_NE, MSE_NE, F_NE, 0))
library(knitr)
kable(antable)
anova_table <- function(region, ssr, sse, msr, mse, f, p) {
antable = data.frame(Source = c("Regression", "Error", "Total"),
df = c(1, nrow(region) - 2, nrow(region) - 1),
ss = c(ssr, sse, ssr + sse),
ms = c(msr, mse, NA),
f_val = c(f, NA, NA),
p_val = c(p, NA, NA))
return(antable)
}
kable(anova_table(NE, SSR_NE, SSE_NE, MSR_NE, MSE_NE, F_NE, 0))
library(knitr)
# kable(antable)
library(knitr)
kable(anova_table(NE, SSR_NE, SSE_NE, MSR_NE, MSE_NE, F_NE, 0))
library(knitr)
kable(anova_table(NE, SSR_NE, SSE_NE, MSR_NE, MSE_NE, F_NE, p_NE))
p_NE = 1-pf(F_NE,1,nrow(NE)-2)
library(knitr)
kable(anova_table(NE, SSR_NE, SSE_NE, MSR_NE, MSE_NE, F_NE, p_NE))
kable(anova_table(NC, SSR_NC, SSE_NC, MSR_NC, MSE_NC, F_NC, p_NC))
p_NC = 1-pf(F_NC,1,nrow(NC)-2)
kable(anova_table(NC, SSR_NC, SSE_NC, MSR_NC, MSE_NC, F_NC, p_NC))
p_S = 1-pf(F_S,1,nrow(S)-2)
kable(anova_table(S, SSR_S, SSE_S, MSR_S, MSE_S, F_S, p_S))
p_W = 1-pf(F_W,1,nrow(W)-2)
kable(anova_table(W, SSR_W, SSE_W, MSR_W, MSE_W, F_W, p_W))
p(NC)
p_NC
kable(p_NC)
str(p_NC)
kable(anova_table(NC, SSR_NC, SSE_NC, MSR_NC, MSE_NC, F_NC, string(p_NC))
kable(anova_table(NC, SSR_NC, SSE_NC, MSR_NC, MSE_NC, F_NC, string(p_NC)))
kable(anova_table(NC, SSR_NC, SSE_NC, MSR_NC, MSE_NC, F_NC, str(p_NC)))
kable(anova_table(NC, SSR_NC, SSE_NC, MSR_NC, MSE_NC, F_NC, p_NC))
?kable
knitr::opts_chunk$set(echo = FALSE)
plot(m2.resid ~ m2.yhat,
main = "Model 2: Residuals", xlab = "Fitted Values", ylab = "Residuals")
# Get residuals
m2.resid = f2s$residuals
model1.R2 = f1s$r.squared
knitr::opts_chunk$set(echo = FALSE)
cdi_data = read.table("./CDI.txt")
phy = cdi_data$V8 # Number of Active Physicians
pop = cdi_data$V5 # Total Population
are = cdi_data$V4 # Land Area
inc = cdi_data$V16 # total personal income
den = pop / are # Population density
sen = cdi_data$V7
stem(pop)
stem(are)
stem(inc)
stem(den)
stem(sen)
# Create Dataframes
model1 = data.frame(Y = phy, X1 = pop, X2 = are, X3 = inc)
colnames(model1) = c("Active Physicians (Y)", "Total Population (X1)", "Land Area (X2)", "Total Personal Income (X3)")
model2 = data.frame(Y = phy, X1 = den, X2 = sen, X3 = inc)
colnames(model2) = c("Active Physicians (Y)", "Population Density (X1)", "Population Over 64 (X2)", "Total Personal Income (X3)")
pairs(model1, main = "Scatter Plot Matrix (Model 1)")
cor(model1)
pairs(model2, main = "Scatter Plot Matrix (Model 2)")
cor(model2)
# Get models
fit1 = lm(model1)
fit2 = lm(model2)
f1s = summary(fit1)
f2s = summary(fit2)
betas1 = f1s$coefficients
betas2 = f2s$coefficients
model1.R2 = f1s$r.squared
model2.R2 = f2s$r.squared
# Get residuals
m1.resid = f1s$residuals
m1.yhat = fit1$fitted.values
par(mfrow = c(2,2))
# Residual Plots
plot(m1.resid ~ m1.yhat,
main = "Model 1: Residuals ~ Fitted values", xlab = "Fitted Values", ylab = "Residuals")
abline(0,0,col = "red")
# Predictors
plot(x = (pop)/1000000,y = m1.resid,
main = "Model 1: Residuals ~ Population", xlab = "Population (1 Million)", ylab = "Residuals")
abline(0,0,col = "red")
plot(m1.resid ~ are,
main = "Model 1: Residuals ~ Area", xlab = "Land Area", ylab = "Residuals")
abline(0,0,col = "red")
plot(m1.resid ~ inc,
main = "Model 1: Residuals ~ Income", xlab = "Personal Income", ylab = "Residuals")
abline(0,0,col = "red")
par(mfrow = c(2,2))
# Two Factor
plot(x = (pop/100000) * (are/10000), y = m1.resid,
main = "Model 1: Residuals ~ Population * Area", xlab = "Population * Area (10 Million)", ylab = "Residuals")
abline(0,0,col = "red")
plot(x = (pop/100000) * (inc/10000), y = m1.resid,
main = "Model 1: Residuals ~ Population * Income", xlab = "Population * Income (10 Million)", ylab = "Residuals")
abline(0,0,col = "red")
plot(x = (are * inc)/10000000, y = m1.resid,
main = "Model 1: Residuals ~ Area * Income", xlab = "Area * Income (10 Million)", ylab = "Residuals")
abline(0,0,col = "red")
# Predictors
plot(x = (pop)/1000000,y = m2.resid,
main = "Model 2: Residuals ~ Population", xlab = "Population (1 Million)", ylab = "Residuals")
# Get residuals
m2.resid = f2s$residuals
m2.yhat = fit2$fitted.values
par(mfrow = c(2,2))
# Residual Plots
plot(m2.resid ~ m2.yhat,
main = "Model 2: Residuals ~ Fitted values", xlab = "Fitted Values", ylab = "Residuals")
abline(0,0,col = "red")
# Predictors
plot(x = (pop)/1000000,y = m2.resid,
main = "Model 2: Residuals ~ Population", xlab = "Population (1 Million)", ylab = "Residuals")
abline(0,0,col = "red")
plot(m2.resid ~ are,
main = "Model 2: Residuals ~ Area", xlab = "Land Area", ylab = "Residuals")
abline(0,0,col = "red")
plot(m2.resid ~ inc,
main = "Model 2: Residuals ~ Income", xlab = "Personal Income", ylab = "Residuals")
abline(0,0,col = "red")
par(mfrow = c(2,2))
# Two Factor
plot(x = (pop/100000) * (are/10000), y = m2.resid,
main = "Model 2: Residuals ~ Population * Area", xlab = "Population * Area (10 Million)", ylab = "Residuals")
abline(0,0,col = "red")
plot(x = (pop/100000) * (inc/10000), y = m2.resid,
main = "Model 2: Residuals ~ Population * Income", xlab = "Population * Income (10 Million)", ylab = "Residuals")
abline(0,0,col = "red")
plot(x = (are * inc)/10000000, y = m2.resid,
main = "Model 1: Residuals ~ Area * Income", xlab = "Area * Income (10 Million)", ylab = "Residuals")
abline(0,0,col = "red")
par(mfrow = c(2,3))
stem(pop)
stem(are)
stem(inc)
stem(den)
stem(sen)
par(mfcol = c(2,3))
stem(pop)
stem(are)
stem(inc)
stem(den)
stem(sen)
stem(pop)
plot(stem(pop))
?stem
stem(pop)
stem(pop, width = 80)
stem(pop, width = 10)
stem(pop, width = 20)
stem(are, width = 20)
stem(inc, width = 20)
stem(den, width = 20)
stem(sen, width = 20)
par(mfrow = c(2,1))
stem(pop, width = 20)
stem(are, width = 20)
stem(inc, width = 20)
stem(den, width = 20)
stem(sen, width = 20)
par(mfrow = c(1,2))
stem(pop, width = 20)
stem(are, width = 20)
stem(inc, width = 20)
stem(den, width = 20)
stem(sen, width = 20)
par(mfrow = c(1,2))
a <- stem(pop, width = 20)
b <- stem(are, width = 20)
# stem(inc, width = 20)
# stem(den, width = 20)
# stem(sen, width = 20)
par(mfrow = c(1,2))
a <- stem(pop, width = 20)
b <- stem(are, width = 20)
# stem(inc, width = 20)
# stem(den, width = 20)
# stem(sen, width = 20)
# par(mfrow = c(1,2))
a <- stem(pop, width = 20)
b <- stem(are, width = 20)
# stem(inc, width = 20)
# stem(den, width = 20)
# stem(sen, width = 20)
a = stem(pop)
a
a = stem(pop)
kable(stem(pop))
library(knitr)
kable(stem(pop))
# par(mfrow = c(1,2))
kable(stem(pop, width = 20))
stem(are, width = 20)
# stem(inc, width = 20)
# stem(den, width = 20)
# stem(sen, width = 20)
# par(mfrow = c(1,2))
kable(stem(pop, width = 20))
# stem(are, width = 20)
# stem(inc, width = 20)
# stem(den, width = 20)
# stem(sen, width = 20)
# par(mfrow = c(1,2))
library(knitr)
kable(stem(pop, width = 20))
# stem(are, width = 20)
# stem(inc, width = 20)
# stem(den, width = 20)
# stem(sen, width = 20)
# par(mfrow = c(1,2))
table(stem(pop, width = 20))
# stem(are, width = 20)
# stem(inc, width = 20)
# stem(den, width = 20)
# stem(sen, width = 20)
stem(pop)
# par(mfrow = c(1,2))
stem(pop, width = 20)
# Get models
fit1 = lm(model1)
fit2 = lm(model2)
f1s = summary(fit1)
f2s = summary(fit2)
betas1 = f1s$coefficients
betas2 = f2s$coefficients
betas1
betas2
betas1
f1s
fit1$coefficients
# Get models
fit1 = lm(model1)
fit2 = lm(model2)
f1s = summary(fit1)
f2s = summary(fit2)
betas1 = fit1$coefficients
betas2 = fit2$coefficients
betas1
betas2
betas1
betas2
plot(fit1)
plot(Y ~ x1+x2, data = model1)
plot(y ~ x1+x2, data = model1)
plot(model1)
plot(phy ~ pop+are+inc)
plot(x = pop+are+inc, y = phy)
fit1
summary(fit1)
fit1$fitted.values
fit1$coefficients
plot(x = pop+are+inc, y = phy)
slope = betas1[1] + betas1[2]*pop + betas1[3]*are + betas1[4]*inc
slope
plot(x = pop+are+inc, y = phy)
slope = betas1[1] + betas1[2] + betas1[3] + betas1[4]
slope
fit1$coefficients
plot(x = pop+are+inc, y = phy)
slope = betas1[2] + betas1[3] + betas1[4]
int = betas1[1]
slope = betas1[2] + betas1[3] + betas1[4]
int = betas1[1]
plot(x = pop+are+inc, y = phy)
abline(inc,plot,col="red")
slope = betas1[2] + betas1[3] + betas1[4]
int = betas1[1]
plot(x = pop+are+inc, y = phy)
abline(int,slope,col="red")
slope = betas1[2] + betas1[3] + betas1[4]
int = betas1[1]
plot(x = pop+are+inc, y = phy)
abline(int,betas1,col="red")
slope = betas1[2] + betas1[3] + betas1[4]
int = betas1[1]
plot(x = pop+are+inc, y = phy)
abline(int,betas[2],col="red")
slope = betas1[2] + betas1[3] + betas1[4]
int = betas1[1]
plot(x = pop+are+inc, y = phy)
abline(int, betas[2] ,col="red")
slope = betas1[2] + betas1[3] + betas1[4]
int = betas1[1]
plot(x = pop+are+inc, y = phy)
abline(int, betas[2], col="red")
slope = betas1[2] + betas1[3] + betas1[4]
int = betas1[1]
plot(x = pop+are+inc, y = phy)
abline(int, betas1[2], col="red")
slope = betas1[2] + betas1[3] + betas1[4]
int = betas1[1]
plot(x = pop+are+inc, y = phy)
abline(int, betas1[3], col="red")
slope = betas1[2] + betas1[3] + betas1[4]
int = betas1[1]
plot(x = pop+are+inc, y = phy)
abline(int, betas1[4], col="red")
slope = betas1[2] + betas1[3] + betas1[4]
int = betas1[1]
plot(x = pop+are+inc, y = phy)
abline(int, betas1[1], col="red")
abline(fit1)
slope = betas1[2] + betas1[3] + betas1[4]
int = betas1[1]
plot(x = pop+are+inc, y = phy)
abline(fit1)
slope = betas1[2] + betas1[3] + betas1[4]
int = betas1[1]
plot(x = pop+are+inc, y = phy)
abline(fit1)
slope = betas1[2] + betas1[3] + betas1[4]
int = betas1[1]
plot(x = pop+are+inc, y = phy)
abline(fit1, col="red")
fit1
slope = betas1[2] + betas1[3] + betas1[4]
int = betas1[1]
plot(x = pop+are+inc, y = phy)
# Get residuals
m1.resid = f1s$residuals
m1.yhat = fit1$fitted.values
par(mfrow = c(2,1))
# Residual Plots
plot(m1.resid ~ m1.yhat,
main = "Model 1: Residuals ~ Fitted values", xlab = "Fitted Values", ylab = "Residuals")
abline(0,0,col = "red")
# Predictors
plot(x = (pop)/1000000,y = m1.resid,
main = "Model 1: Residuals ~ Population", xlab = "Population (1 Million)", ylab = "Residuals")
abline(0,0,col = "red")
plot(m1.resid ~ are,
main = "Model 1: Residuals ~ Area", xlab = "Land Area", ylab = "Residuals")
abline(0,0,col = "red")
plot(m1.resid ~ inc,
main = "Model 1: Residuals ~ Income", xlab = "Personal Income", ylab = "Residuals")
abline(0,0,col = "red")
par(mfrow = c(2,2))
# Two Factor
plot(x = (pop/100000) * (are/10000), y = m1.resid,
main = "Model 1: Residuals ~ Population * Area", xlab = "Population * Area (10 Million)", ylab = "Residuals")
abline(0,0,col = "red")
plot(x = (pop/100000) * (inc/10000), y = m1.resid,
main = "Model 1: Residuals ~ Population * Income", xlab = "Population * Income (10 Million)", ylab = "Residuals")
abline(0,0,col = "red")
plot(x = (are * inc)/10000000, y = m1.resid,
main = "Model 1: Residuals ~ Area * Income", xlab = "Area * Income (10 Million)", ylab = "Residuals")
abline(0,0,col = "red")
# Get residuals
m1.resid = f1s$residuals
m1.yhat = fit1$fitted.values
par(mfrow = c(1,2))
# Residual Plots
plot(m1.resid ~ m1.yhat,
main = "Model 1: Residuals ~ Fitted values", xlab = "Fitted Values", ylab = "Residuals")
abline(0,0,col = "red")
# Predictors
plot(x = (pop)/1000000,y = m1.resid,
main = "Model 1: Residuals ~ Population", xlab = "Population (1 Million)", ylab = "Residuals")
abline(0,0,col = "red")
plot(m1.resid ~ are,
main = "Model 1: Residuals ~ Area", xlab = "Land Area", ylab = "Residuals")
abline(0,0,col = "red")
plot(m1.resid ~ inc,
main = "Model 1: Residuals ~ Income", xlab = "Personal Income", ylab = "Residuals")
abline(0,0,col = "red")
par(mfrow = c(2,2))
# Two Factor
plot(x = (pop/100000) * (are/10000), y = m1.resid,
main = "Model 1: Residuals ~ Population * Area", xlab = "Population * Area (10 Million)", ylab = "Residuals")
abline(0,0,col = "red")
plot(x = (pop/100000) * (inc/10000), y = m1.resid,
main = "Model 1: Residuals ~ Population * Income", xlab = "Population * Income (10 Million)", ylab = "Residuals")
abline(0,0,col = "red")
plot(x = (are * inc)/10000000, y = m1.resid,
main = "Model 1: Residuals ~ Area * Income", xlab = "Area * Income (10 Million)", ylab = "Residuals")
abline(0,0,col = "red")
# Get residuals
m1.resid = f1s$residuals
m1.yhat = fit1$fitted.values
par(mfrow = c(2,2))
# Residual Plots
plot(m1.resid ~ m1.yhat,
main = "Model 1: Residuals ~ Fitted values", xlab = "Fitted Values", ylab = "Residuals")
abline(0,0,col = "red")
# Predictors
plot(x = (pop)/1000000,y = m1.resid,
main = "Model 1: Residuals ~ Population", xlab = "Population (1 Million)", ylab = "Residuals")
abline(0,0,col = "red")
plot(m1.resid ~ are,
main = "Model 1: Residuals ~ Area", xlab = "Land Area", ylab = "Residuals")
abline(0,0,col = "red")
plot(m1.resid ~ inc,
main = "Model 1: Residuals ~ Income", xlab = "Personal Income", ylab = "Residuals")
abline(0,0,col = "red")
par(mfrow = c(2,2))
# Two Factor
plot(x = (pop/100000) * (are/10000), y = m1.resid,
main = "Model 1: Residuals ~ Population * Area", xlab = "Population * Area (10 Million)", ylab = "Residuals")
abline(0,0,col = "red")
plot(x = (pop/100000) * (inc/10000), y = m1.resid,
main = "Model 1: Residuals ~ Population * Income", xlab = "Population * Income (10 Million)", ylab = "Residuals")
abline(0,0,col = "red")
plot(x = (are * inc)/10000000, y = m1.resid,
main = "Model 1: Residuals ~ Area * Income", xlab = "Area * Income (10 Million)", ylab = "Residuals")
abline(0,0,col = "red")
fit <- lm(x = pop*are, y = phy)
fit <- lm(phy ~ pop*are)
fit
plot(fit)
tf1_12 <- lm(phy ~ pop*are)
tf1_13 <- lm(phy ~ pop*inc)
tf1_23 <- lm(phy ~ are*inc)
tf1_12 <- lm(phy ~ pop*are)
tf1_13 <- lm(phy ~ pop*inc)
tf1_23 <- lm(phy ~ are*inc)
r2_12 <- summary(tf1_12)$r.squared
r2_13 <- summary(tf1_12)$r.squared
r2_23 <- summary(tf1_12)$r.squared
tf1_12 <- lm(phy ~ pop*are)
tf1_13 <- lm(phy ~ pop*inc)
tf1_23 <- lm(phy ~ are*inc)
r2_12 <- summary(tf1_12)$r.squared
r2_13 <- summary(tf1_12)$r.squared
r2_23 <- summary(tf1_12)$r.squared
r2_12
r2_13
r2_23
tf1_12 <- lm(phy ~ pop*are)
tf1_13 <- lm(phy ~ pop*inc)
tf1_23 <- lm(phy ~ are*inc)
r2_12 <- summary(tf1_12)$r.squared
r2_13 <- summary(tf1_13)$r.squared
r2_23 <- summary(tf1_23)$r.squared
r2_12
r2_13
r2_23
tf1_12 <- lm(phy ~ pop*are)
tf1_13 <- lm(phy ~ pop*inc)
tf1_23 <- lm(phy ~ are*inc)
r2_12 <- summary(tf1_12)$r.squared
r2_13 <- summary(tf1_13)$r.squared
r2_23 <- summary(tf1_23)$r.squared
res <- c(a = r2_12, b = r2_13, c = r2_23)
names(res) <- c("R2 of X1*X2", "R2 of X1*X3", "R2 of X2*X3")
tf1_12 <- lm(phy ~ pop*are)
tf1_13 <- lm(phy ~ pop*inc)
tf1_23 <- lm(phy ~ are*inc)
r2_12 <- summary(tf1_12)$r.squared
r2_13 <- summary(tf1_13)$r.squared
r2_23 <- summary(tf1_23)$r.squared
res <- c(a = r2_12, b = r2_13, c = r2_23)
names(res) <- c("R2 of X1*X2", "R2 of X1*X3", "R2 of X2*X3")
res
tf1_12 <- lm(phy ~ pop*are)
tf1_13 <- lm(phy ~ pop*inc)
tf1_23 <- lm(phy ~ are*inc)
r2_12 <- summary(tf1_12)$r.squared
r2_13 <- summary(tf1_13)$r.squared
r2_23 <- summary(tf1_23)$r.squared
res <- c(a = r2_12, b = r2_13, c = r2_23)
names(res) <- c("R2 of X1*X2", "R2 of X1*X3", "R2 of X2*X3")
res
tf1_12 <- lm(phy ~ pop*are)
tf1_13 <- lm(phy ~ pop*inc)
tf1_23 <- lm(phy ~ are*inc)
r2_12 <- summary(tf1_12)$r.squared
r2_13 <- summary(tf1_13)$r.squared
r2_23 <- summary(tf1_23)$r.squared
res <- c(a = r2_12, b = r2_13, c = r2_23)
names(res) <- c("(R2 of X1*X2)", "(R2 of X1*X3)", "(R2 of X2*X3)")
res
tf2_12 <- lm(phy ~ den*sen)
tf2_13 <- lm(phy ~ den*inc)
tf2_23 <- lm(phy ~ sen*inc)
r2_12 <- summary(tf2_12)$r.squared
r2_13 <- summary(tf2_13)$r.squared
r2_23 <- summary(tf2_23)$r.squared
res <- c(a = r2_12, b = r2_13, c = r2_23)
names(res) <- c("(R2 of X1*X2)", "(R2 of X1*X3)", "(R2 of X2*X3)")
res
